//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Mar 22 2020 01:47:48).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class HDSQLiteStatementCache, NSMutableArray, NSMutableDictionary, NSNumber, NSURL;
@protocol HDSQLiteDatabaseDelegate;

@interface HDSQLiteDatabase : NSObject
{
    struct sqlite3 _db;
    BOOL _isInTransaction;
    BOOL _requiresRollback;
    long long _transactionType;
    NSMutableDictionary *_attachedDatabaseURLsByName;
    BOOL _isHandlingTransactionEnd;
    NSMutableArray *_beforeCommitBlocks;
    NSMutableArray *_onCommitBlocks;
    NSMutableArray *_onRollbackBlocks;
    BOOL _writer;
    BOOL _checkpointRequired;
    BOOL _hasEncounteredCorruptionError;
    int _corruptionResultCode;
    id <HDSQLiteDatabaseDelegate> _delegate;
    NSURL *_fileURL;
    long long _cacheScope;
    HDSQLiteStatementCache *_statementCache;
}

+ (id)virtualFilesystemModule;
+ (id)highFrequencyDatabaseURLWithProfileDirectoryPath:(id)arg1;
+ (id)protectedDatabaseURLWithProfileDirectoryPath:(id)arg1;
+ (id)mainDatabaseURLWithProfileDirectoryPath:(id)arg1;
@property(readonly, nonatomic) int corruptionResultCode; // @synthesize corruptionResultCode=_corruptionResultCode;
@property(readonly, nonatomic) BOOL hasEncounteredCorruptionError; // @synthesize hasEncounteredCorruptionError=_hasEncounteredCorruptionError;
@property(readonly, nonatomic) HDSQLiteStatementCache *statementCache; // @synthesize statementCache=_statementCache;
@property(nonatomic) long long cacheScope; // @synthesize cacheScope=_cacheScope;
@property(nonatomic) BOOL checkpointRequired; // @synthesize checkpointRequired=_checkpointRequired;
@property(nonatomic, getter=isWriter) BOOL writer; // @synthesize writer=_writer;
@property(readonly, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
@property(nonatomic) __weak id <HDSQLiteDatabaseDelegate> delegate; // @synthesize delegate=_delegate;
// - (void).cxx_destruct;
- (id)_statementCache;
- (BOOL)_stepStatement:(struct sqlite3_stmt )arg1 hasRow:(BOOL )arg2 error:(id )arg3;
- (id)dumpSchemaWithError:(id )arg1;
- (id)_tableNamesForDatabaseWithName:(id)arg1 error:(id )arg2;
- (id)_schemaForDatabaseWithName:(id)arg1 error:(id )arg2;
- (id)_schemaForTableWithName:(id)arg1 database:(id)arg2 error:(id )arg3;
- (id)_schemaForIndexWithName:(id)arg1 database:(id)arg2 error:(id )arg3;
- (BOOL)isDatabaseWithNameAttached:(id)arg1;
- (BOOL)detachDatabaseWithName:(id)arg1 error:(id )arg2;
- (BOOL)attachDatabaseWithName:(id)arg1 fileURL:(id)arg2 error:(id )arg3;
- (id)queryPlanForSQL:(id)arg1 error:(id )arg2;
- (BOOL)performIntegrityCheckWithError:(id )arg1 integrityErrorHandler:(id /* CDUnknownBlockType */)arg2;
- (BOOL)incrementalVacuumDatabaseIfNeeded:(id)arg1 error:(id )arg2;
- (BOOL)enableIncrementalAutovacuumForDatabaseWithName:(id)arg1 error:(id )arg2;
- (BOOL)columnIsNullable:(id)arg1 inTable:(id)arg2 error:(id )arg3;
- (id)typeOfColumn:(id)arg1 inTable:(id)arg2 error:(id )arg3;
- (BOOL)foreignKeyExistsFromTable:(id)arg1 column:(id)arg2 toTable:(id)arg3 column:(id)arg4 error:(id )arg5;
- (BOOL)table:(id)arg1 hasColumnWithName:(id)arg2 error:(id )arg3;
- (long long)validateForeignKeysForTable:(id)arg1 databaseName:(id)arg2 error:(id )arg3;
- (void)requireRollback;
- (void)beforeCommit:(id /* CDUnknownBlockType */)arg1;
- (void)onCommit:(id /* CDUnknownBlockType */)arg1 orRollback:(id /* CDUnknownBlockType */)arg2;
- (BOOL)_integerValueForPragma:(id)arg1 databaseName:(id)arg2 value:(long long )arg3 error:(id )arg4;
- (BOOL)_setPragma:(id)arg1 integerValue:(long long)arg2 withDatabaseName:(id)arg3 error:(id )arg4;
@property(readonly, copy, nonatomic) NSNumber *lastInsertRowID;
- (long long)userVersionWithDatabaseName:(id)arg1 error:(id )arg2;
- (BOOL)setUserVersion:(long long)arg1 withDatabaseName:(id)arg2 error:(id )arg3;
- (BOOL)_executeSQL:(id)arg1 cache:(BOOL)arg2 error:(id )arg3 bindingHandler:(id /* CDUnknownBlockType */)arg4 enumerationHandler:(id /* CDUnknownBlockType */)arg5;
- (BOOL)executeSQLStatements:(id)arg1 error:(id )arg2;
- (BOOL)executeUncachedSQL:(id)arg1 error:(id )arg2;
- (BOOL)executeUncachedSQL:(id)arg1 error:(id )arg2 bindingHandler:(id /* CDUnknownBlockType */)arg3 enumerationHandler:(id /* CDUnknownBlockType */)arg4;
- (BOOL)executeSQL:(id)arg1 error:(id )arg2 bindingHandler:(id /* CDUnknownBlockType */)arg3 enumerationHandler:(id /* CDUnknownBlockType */)arg4;
- (BOOL)_prepareStatementForSQL:(id)arg1 cache:(BOOL)arg2 error:(id )arg3 usingBlock:(id /* CDUnknownBlockType */)arg4;
- (BOOL)performTransactionWithType:(long long)arg1 error:(id )arg2 usingBlock:(id /* CDUnknownBlockType */)arg3;
- (int)getChangesCount;
- (id)getLastErrorWithResultCode:(int)arg1;
- (BOOL)_executeUncachedSQL:(id)arg1 error:(id )arg2 retryIfBusy:(BOOL)arg3;
- (BOOL)_executeUncachedSQL:(id)arg1 error:(id )arg2;
- (BOOL)_verifyDatabaseOpenAndReturnError:(id )arg1;
- (void)accessDatabaseUsingBlock:(id /* CDUnknownBlockType */)arg1;
@property(readonly, nonatomic) long long statementCacheScope;
@property(readonly, nonatomic, getter=isOpen) BOOL open;
- (void)close;
- (int)openWithFileProtectionCompleteUnlessOpenWithError:(id )arg1;
- (int)openForReadingWithError:(id )arg1;
- (int)openWithError:(id )arg1;
- (int)_openForWriting:(BOOL)arg1 additionalFlags:(int)arg2 error:(id )arg3;
- (void)dealloc;
- (id)initWithDatabaseURL:(id)arg1 copyingDatabase:(id)arg2 delegate:(id)arg3;
- (id)initMemoryDatabaseFromURL:(id)arg1 delegate:(id)arg2;
- (int)_copyContentsFromDatabase:(struct sqlite3 )arg1 toDatabase:(struct sqlite3 )arg2;
- (id)initMemoryDatabaseWithDelegate:(id)arg1;
- (id)initWithDatabaseURL:(id)arg1 delegate:(id)arg2;
- (BOOL)accessHFDForWritingWithError:(id )arg1 block:(id /* CDUnknownBlockType */)arg2;
- (BOOL)accessHFDForReadingWithError:(id )arg1 block:(id /* CDUnknownBlockType */)arg2;
- (id)highFrequencyDatabaseURL;
- (BOOL)isProtectedDatabaseAttached;
- (BOOL)detachProtectedDatabaseWithError:(id )arg1;
- (BOOL)attachProtectedDatabaseWithURL:(id)arg1 error:(id )arg2;
- (BOOL)deleteDataEntitySubclassTable:(id)arg1 intermediateTables:(id)arg2 error:(id )arg3;
- (BOOL)deleteRowsFromDataEntitySubclassTable:(id)arg1 intermediateTables:(id)arg2 error:(id )arg3;
- (BOOL)correlationCountForDataEntitySubclassTable:(id)arg1 count:(long long )arg2 error:(id )arg3;
- (id)statementsForDeleteRowsFromDataEntitySubclassTable:(id)arg1 intermediateTables:(id)arg2 error:(id )arg3;

@end

