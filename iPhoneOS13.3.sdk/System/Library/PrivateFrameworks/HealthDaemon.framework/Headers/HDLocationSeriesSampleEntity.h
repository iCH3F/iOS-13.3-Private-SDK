//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Mar 22 2020 01:47:48).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <HealthDaemon/HDSeriesSampleEntity.h>

#import <HealthDaemon/HDSeriesEntity-Protocol.h>

@interface HDLocationSeriesSampleEntity : HDSeriesSampleEntity <HDSeriesEntity>
{
}

+ (BOOL)_updateFrozenEntityToMatchReplacedUnfrozenEntity:(id)arg1 unfrozenSeriesUUID:(id)arg2 unfrozenSeriesHFDKey:(long long)arg3 database:(id)arg4 error:(id )arg5;
+ (id)_routeSampleWithID:(id)arg1 canBeUnfrozen:(BOOL)arg2 profile:(id)arg3 error:(id )arg4;
+ (id)hasSeriesDataForHFDKey:(id)arg1 transaction:(id)arg2 error:(id )arg3;
+ (BOOL)addCodableObject:(id)arg1 toCollection:(id)arg2;
+ (id)codableObjectsFromObjectCollection:(id)arg1;
+ (BOOL)enumerateLocationDataInDatabase:(id)arg1 HFDKey:(id)arg2 error:(id )arg3 handler:(id /* CDUnknownBlockType */)arg4;
+ (BOOL)performPostJournalMergeCleanupWithTransaction:(id)arg1 profile:(id)arg2 error:(id )arg3;
+ (BOOL)insertLocationData:(id)arg1 seriesIdentifier:(id)arg2 profile:(id)arg3 error:(id )arg4;
+ (id)mergeDataObject:(id)arg1 provenance:(id)arg2 profile:(id)arg3 database:(id)arg4 error:(id )arg5 insertHandler:(id /* CDUnknownBlockType */)arg6;
+ (BOOL)supportsObjectMerging;
+ (BOOL)_deleteHFDSeriesIfFoundForPersistentID:(id)arg1 database:(id)arg2 error:(id )arg3;
+ (id)insertDataObject:(id)arg1 withProvenance:(id)arg2 inDatabase:(id)arg3 persistentID:(id)arg4 error:(id )arg5;
+ (BOOL)_insertCodableSeriesDataFromObject:(id)arg1 persistentID:(id)arg2 database:(id)arg3 error:(id )arg4;
+ (id)entityEncoderForProfile:(id)arg1 database:(id)arg2 purpose:(long long)arg3 encodingOptions:(id)arg4 authorizationFilter:(id /* CDUnknownBlockType */)arg5;
+ (id)createTableSQL;
+ (BOOL)isConcreteEntity;
+ (BOOL)participatesInInsertion;
+ (BOOL)isBackedByTable;
- (id)_frozenUUIDForUnfrozenSeriesSample:(id)arg1 HFDKey:(long long)arg2 frozenStartTime:(double)arg3 frozenEndTime:(double)arg4 frozenCount:(long long)arg5 profile:(id)arg6 database:(id)arg7 error:(id )arg8;
- (id)freezeWithDatabase:(id)arg1 profile:(id)arg2 error:(id )arg3;
- (void)willDeleteFromDatabase:(id)arg1;
- (BOOL)deleteFromDatabase:(id)arg1 error:(id )arg2;
- (BOOL)enumerateLocationDataInDatabase:(id)arg1 error:(id )arg2 handler:(id /* CDUnknownBlockType */)arg3;
- (BOOL)enumerateLocationDataFromTimestamp:(double)arg1 toTimestamp:(double)arg2 database:(id)arg3 error:(id )arg4 handler:(id /* CDUnknownBlockType */)arg5;
- (id)timePeriodForSeriesInDatabase:(id)arg1 error:(id )arg2;
- (id)sampleCountForSeriesInDatabase:(id)arg1 error:(id )arg2;
- (BOOL)insertLocationData:(id)arg1 database:(id)arg2 error:(id )arg3;

@end

