//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Mar 22 2020 01:47:48).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <UIKit/UIViewController.h>

#import <SpringBoard/SBApplicationHosting-Protocol.h>
#import <SpringBoard/SBAutoUnlockRule-Protocol.h>
#import <SpringBoard/SBBiometricUnlockBehavior-Protocol.h>
#import <SpringBoard/SBButtonEventsHandler-Protocol.h>
#import <SpringBoard/SBCoverSheetSlidingViewControllerContentViewController-Protocol.h>
#import <SpringBoard/SBIdleTimerProviding-Protocol.h>
#import <SpringBoard/SBLockScreenBacklightControlling-Protocol.h>
#import <SpringBoard/SBLockScreenBehaviorSuppressing-Protocol.h>
#import <SpringBoard/SBLockScreenBlockedStateObserving-Protocol.h>
#import <SpringBoard/SBLockScreenButtonObserving-Protocol.h>
#import <SpringBoard/SBLockScreenCallHandling-Protocol.h>
#import <SpringBoard/SBLockScreenContentStateProviding-Protocol.h>
#import <SpringBoard/SBLockScreenCustomActionStoring-Protocol.h>
#import <SpringBoard/SBLockScreenIdleTimerControlling-Protocol.h>
#import <SpringBoard/SBLockScreenLockingAndUnlocking-Protocol.h>
#import <SpringBoard/SBLockScreenMediaControlsPresenting-Protocol.h>
#import <SpringBoard/SBLockScreenPasscodeViewPresenting-Protocol.h>
#import <SpringBoard/SBLockScreenPluginPresenting-Protocol.h>
#import <SpringBoard/SBLockScreenProximityBehaviorProviding-Protocol.h>
#import <SpringBoard/SBLockScreenStatusBarTransitioning-Protocol.h>

@class SBFLockScreenActionContext, SBFLockScreenWakeAnimator, UIVisualEffectView;
@protocol SBBiometricUnlockBehaviorDelegate, SBIdleTimerCoordinating;

@interface SBLockScreenViewControllerBase : UIViewController <SBApplicationHosting, SBAutoUnlockRule, SBBiometricUnlockBehavior, SBButtonEventsHandler, SBCoverSheetSlidingViewControllerContentViewController, SBIdleTimerProviding, SBLockScreenBacklightControlling, SBLockScreenBehaviorSuppressing, SBLockScreenBlockedStateObserving, SBLockScreenButtonObserving, SBLockScreenCallHandling, SBLockScreenContentStateProviding, SBLockScreenCustomActionStoring, SBLockScreenIdleTimerControlling, SBLockScreenLockingAndUnlocking, SBLockScreenMediaControlsPresenting, SBLockScreenPasscodeViewPresenting, SBLockScreenPluginPresenting, SBLockScreenProximityBehaviorProviding, SBLockScreenStatusBarTransitioning>
{
    SBFLockScreenActionContext *_customLockScreenActionContext;
    BOOL _authenticated;
    BOOL _expectsFaceContact;
    id <SBIdleTimerCoordinating> _idleTimerCoordinator;
    double _backlightLevel;
    id <SBBiometricUnlockBehaviorDelegate> _biometricUnlockBehaviorDelegate;
    UIVisualEffectView *_wakeEffectView;
    SBFLockScreenWakeAnimator *_lockScreenWakeAnimator;
}

@property(readonly, nonatomic) SBFLockScreenWakeAnimator *lockScreenWakeAnimator; // @synthesize lockScreenWakeAnimator=_lockScreenWakeAnimator;
@property(nonatomic) __weak UIVisualEffectView *wakeEffectView; // @synthesize wakeEffectView=_wakeEffectView;
@property(nonatomic) __weak id <SBBiometricUnlockBehaviorDelegate> biometricUnlockBehaviorDelegate; // @synthesize biometricUnlockBehaviorDelegate=_biometricUnlockBehaviorDelegate;
@property(nonatomic) double backlightLevel; // @synthesize backlightLevel=_backlightLevel;
@property(nonatomic) __weak id <SBIdleTimerCoordinating> idleTimerCoordinator; // @synthesize idleTimerCoordinator=_idleTimerCoordinator;
@property(readonly, nonatomic) BOOL expectsFaceContact; // @synthesize expectsFaceContact=_expectsFaceContact;
@property(nonatomic, getter=isAuthenticated) BOOL authenticated; // @synthesize authenticated=_authenticated;
// - (void).cxx_destruct;
- (void)handleBiometricEvent:(NSUInteger)arg1;
- (BOOL)shouldAutoUnlockForSource:(int)arg1;
- (BOOL)shouldUnlockUIOnKeyDownEvent;
- (void)noteResetRestoreStateUpdated;
- (void)noteDeviceBlockedStatusUpdated;
- (BOOL)isMainPageVisible;
- (void)jiggleLockIcon;
- (id)createHomeButtonSuppressAfterUnlockRecognizerForUnlockSource:(int)arg1;
- (id)createHomeButtonShowPasscodeRecognizerForHomeButtonPress;
@property(nonatomic, getter=isShowingMediaControls) BOOL showingMediaControls;
@property(retain, nonatomic, getter=_customLockScreenActionContext) SBFLockScreenActionContext *customLockScreenActionContext;
@property(readonly, nonatomic) BOOL shouldShowLockStatusBarTime;
- (BOOL)shouldDisableALS;
@property(readonly, nonatomic) BOOL contentOccludesBackground;
- (void)hostedAppWillRotateToInterfaceOrientation:(long long)arg1;
- (id)hostedAppSceneHandles;
- (id)hostedAppSceneHandle;
- (BOOL)isHostingAnApp;
- (BOOL)canHostAnApp;
- (void)noteMenuButtonUp;
- (void)noteMenuButtonDown;
- (BOOL)handleHeadsetButtonPress:(BOOL)arg1;
- (BOOL)handleVolumeDownButtonPress;
- (BOOL)handleVolumeUpButtonPress;
- (BOOL)handleLockButtonPress;
- (BOOL)handleHomeButtonLongPress;
- (BOOL)handleHomeButtonDoublePress;
- (BOOL)handleHomeButtonPress;
- (void)disableLockScreenPluginWithContext:(id)arg1;
- (void)enableLockScreenPluginWithContext:(id)arg1;
- (void)setInScreenOffMode:(BOOL)arg1 forAutoUnlock:(BOOL)arg2 fromUnlockSource:(int)arg3;
- (void)setInScreenOffMode:(BOOL)arg1;
- (BOOL)isInScreenOffMode;
- (void)startLockScreenFadeInAnimationForSource:(int)arg1;
- (id)coordinatorRequestedIdleTimerBehavior:(id)arg1;
- (BOOL)isMakingEmergencyCall;
- (void)emergencyDialerExitedWithError:(id)arg1;
- (void)exitEmergencyDialerAnimated:(BOOL)arg1;
- (void)launchEmergencyDialerAnimated:(BOOL)arg1;
- (void)launchEmergencyDialer;
- (void)launchInCallAlert;
- (void)finishUIUnlockFromSource:(int)arg1;
- (BOOL)canBeDeactivatedForUIUnlockFromSource:(int)arg1;
- (BOOL)willUIUnlockFromSource:(int)arg1;
- (void)prepareForUILock;
- (void)prepareForUIUnlock;
- (BOOL)isUnlockDisabled;
- (void)setPasscodeLockVisible:(BOOL)arg1 animated:(BOOL)arg2 completion:(id /* CDUnknownBlockType */)arg3;
- (void)setPasscodeLockVisible:(BOOL)arg1 animated:(BOOL)arg2;
- (BOOL)isPasscodeLockVisible;
- (BOOL)suppressesScreenshots;
- (BOOL)suppressesControlCenter;
- (BOOL)suppressesBanners;
- (void)updateStatusBarForLockScreenComeback;
- (void)updateStatusBarForLockScreenTeardown;
- (id)descriptionBuilderWithMultilinePrefix:(id)arg1;
- (id)descriptionWithMultilinePrefix:(id)arg1;
- (id)succinctDescriptionBuilder;
- (id)succinctDescription;
- (void)viewWillTransitionToSize:(CGSize)arg1 withTransitionCoordinator:(id)arg2;
- (void)viewDidLoad;

@end

