//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Mar 22 2020 01:47:48).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>


@class CALayer, NSMapTable, NSOperation, NSString, NSUUID, TSDBitmapRenderingQualityInfo, TSDTextureSet, TSUBezierPath, TSUColor;
@protocol MTLTexture;

__attribute__((visibility("hidden")))
@interface TSDTexturedRectangle : NSObject <NSCopying>
{
    CGRect _originalFrame;
    id /* CDUnknownBlockType */ _renderBlock;
    BOOL _singleTextureContainsMipmaps;
    BOOL _didInitFromLayer;
    BOOL _shouldCleanUpSingleTexture;
    BOOL _didInitFromGPUTexture;
    NSMapTable *_eventIndexToViewLayerMap;
    CGColorSpace _colorSpace;
    TSUBezierPath *_shapePath;
    TSUBezierPath *_bakedShapePath;
    BOOL _isIncomingContent;
    BOOL _isVerticalText;
    BOOL _isFlattenedRepresentation;
    BOOL _shouldGenerateMipmap;
    BOOL _shouldUseDisplayLinkPresentationTime;
    unsigned int _singleTextureName;
    NSUUID *_uuid;
    CGImage _bakedImage;
    TSDBitmapRenderingQualityInfo *_bitmapRenderingQualityInfo;
    TSUColor *_backgroundColor;
    CALayer *_layer;
    id <MTLTexture> _metalTexture;
    TSDTexturedRectangle *_metalTextureProxy;
    TSDTextureSet *_parent;
    NSOperation *_renderingOperation;
    NSOperation *_renderingOperationOpenGL;
    NSOperation *_renderingOperationMetal;
    CGImage _sourceImage;
    NSString *_text;
    double _textBaseline;
    TSUColor *_textColor;
    double _textXHeight;
    long long _textureType;
    double _textureOpacity;
    CGPoint _offset;
    CGPoint _originalPosition;
    CGSize _singleTextureSize;
    CGSize _size;
    _NSRange _textRange;
    CGRect _contentRect;
}

+ (id)setupMetalShaderForContext:(id)arg1;
+ (CGRect)boundingRectOnCanvasForTextures:(id)arg1;
+ (CGRect)boundingRectForTextures:(id)arg1;
@property(nonatomic) double textureOpacity; // @synthesize textureOpacity=_textureOpacity;
@property(nonatomic) long long textureType; // @synthesize textureType=_textureType;
@property(nonatomic) double textXHeight; // @synthesize textXHeight=_textXHeight;
@property(nonatomic) _NSRange textRange; // @synthesize textRange=_textRange;
@property(copy, nonatomic) TSUColor *textColor; // @synthesize textColor=_textColor;
@property(nonatomic) double textBaseline; // @synthesize textBaseline=_textBaseline;
@property(copy, nonatomic) NSString *text; // @synthesize text=_text;
@property(nonatomic) CGSize size; // @synthesize size=_size;
@property(copy, nonatomic) TSUBezierPath *shapePath; // @synthesize shapePath=_shapePath;
@property CGImage sourceImage; // @synthesize sourceImage=_sourceImage;
@property(nonatomic) BOOL shouldUseDisplayLinkPresentationTime; // @synthesize shouldUseDisplayLinkPresentationTime=_shouldUseDisplayLinkPresentationTime;
@property __weak NSOperation *renderingOperationMetal; // @synthesize renderingOperationMetal=_renderingOperationMetal;
@property __weak NSOperation *renderingOperationOpenGL; // @synthesize renderingOperationOpenGL=_renderingOperationOpenGL;
@property __weak NSOperation *renderingOperation; // @synthesize renderingOperation=_renderingOperation;
@property(nonatomic) __weak TSDTextureSet *parent; // @synthesize parent=_parent;
@property(readonly, nonatomic) CGRect originalFrame; // @synthesize originalFrame=_originalFrame;
@property(nonatomic) CGPoint originalPosition; // @synthesize originalPosition=_originalPosition;
@property(nonatomic) CGPoint offset; // @synthesize offset=_offset;
@property(nonatomic) BOOL shouldGenerateMipmap; // @synthesize shouldGenerateMipmap=_shouldGenerateMipmap;
@property(nonatomic) __weak TSDTexturedRectangle *metalTextureProxy; // @synthesize metalTextureProxy=_metalTextureProxy;
@property(readonly, nonatomic) CALayer *layer; // @synthesize layer=_layer;
@property(nonatomic) BOOL isFlattenedRepresentation; // @synthesize isFlattenedRepresentation=_isFlattenedRepresentation;
@property(nonatomic) BOOL isVerticalText; // @synthesize isVerticalText=_isVerticalText;
@property(copy, nonatomic) TSUColor *backgroundColor; // @synthesize backgroundColor=_backgroundColor;
@property(nonatomic) BOOL isIncomingContent; // @synthesize isIncomingContent=_isIncomingContent;
@property(nonatomic) CGRect contentRect; // @synthesize contentRect=_contentRect;
@property(nonatomic) CGColorSpace colorSpace; // @synthesize colorSpace=_colorSpace;
@property(nonatomic) __weak TSDBitmapRenderingQualityInfo *bitmapRenderingQualityInfo; // @synthesize bitmapRenderingQualityInfo=_bitmapRenderingQualityInfo;
@property CGImage bakedImage; // @synthesize bakedImage=_bakedImage;
@property(retain, nonatomic) NSUUID *uuid; // @synthesize uuid=_uuid;
// - (void).cxx_destruct;
- (BOOL)hasLiveTexturedRectangleSource;
- (void)setLiveTexturedRectangleSourceProxy:(id)arg1;
- (void)setLiveTexturedRectangleSource:(id)arg1;
- (id)metalTextureWithContext:(id)arg1 cpuReadable:(BOOL)arg2;
- (id)metalTextureWithContext:(id)arg1;
- (id)p_latestTextureNotAfterLayerTime:(double)arg1;
- (void)p_makeMetalTextureCPUReadable:(id)arg1 metalContext:(id)arg2;
- (void)drawFrameWithMetalContext:(id)arg1;
- (void)setupMetalTextureForDevice:(id)arg1 commandQueue:(id)arg2;
- (void)setupMetalTextureForContext:(id)arg1;
- (id)p_allocateMetalTextureForDevice:(id)arg1 renderTarget:(BOOL)arg2 private:(BOOL)arg3;
@property(readonly, nonatomic) id <MTLTexture> metalTexture; // @synthesize metalTexture=_metalTexture;
- (void)releaseMetalTexture;
- (BOOL)isMetalTextureSetup;
- (void)waitUntilAsyncRenderingIsCompleteShouldCancel:(BOOL)arg1;
- (id)viewLayerAtEventIndex:(NSUInteger)arg1;
- (CGRect)convertToCanvasCoordinates:(CGRect)arg1;
@property(readonly, nonatomic) CGRect frameOnCanvas;
@property(readonly, nonatomic) CALayer *parentLayer;
@property(readonly, nonatomic) BOOL isBackgroundTexture;
- (void)p_renderIntoContext:(CGContext )arg1 viewLayer:(id)arg2 shouldApplyAlpha:(BOOL)arg3 shouldIgnoreLayerVisibility:(BOOL)arg4 shouldClipToBounds:(BOOL)arg5;
- (void)renderIntoContext:(CGContext )arg1 eventIndex:(NSUInteger)arg2 shouldApplyAlpha:(BOOL)arg3 shouldClipToBounds:(BOOL)arg4;
- (void)renderIntoContext:(CGContext )arg1 shouldApplyAlpha:(BOOL)arg2;
- (void)renderIntoContext:(CGContext )arg1 shouldApplyAlpha:(BOOL)arg2 shouldIgnoreLayerVisibility:(BOOL)arg3;
- (void)p_bakeLayerWithAngle:(double)arg1 scale:(double)arg2 layer:(id)arg3;
- (void)bakeLayerWithAngle:(double)arg1 scale:(double)arg2 layer:(id)arg3;
@property(readonly, nonatomic) BOOL isBaked;
@property(readonly, nonatomic) CGImage image;
@property(readonly, nonatomic) double singleTextureOpacity;
- (void)releaseSingleTexture;
@property(readonly, nonatomic) unsigned int singleTextureTarget;
@property(readonly, nonatomic) CGSize singleTextureSize; // @synthesize singleTextureSize=_singleTextureSize;
@property(readonly, nonatomic) unsigned int singleTextureName; // @synthesize singleTextureName=_singleTextureName;
- (void)setupSingleTextureWithContext:(id)arg1;
- (void)setupSingleTexture;
@property(readonly, nonatomic) BOOL isSingleTextureSetup;
- (void)p_setupSingleTextureAndGenerateMipMaps:(BOOL)arg1 withContext:(id)arg2;
- (char )p_setupTextureDataWithSize:(CGSize)arg1;
- (void)renderLayerContentsIfNeeded;
@property(readonly, nonatomic) BOOL isRenderable;
@property(readonly, nonatomic) BOOL isRendered;
- (void)evictRenderedResources;
- (void)resetToSourceImageAtEventIndex:(NSUInteger)arg1;
- (id)p_newImageAndBufferWithTransform:(CGAffineTransform)arg1;
- (CGAffineTransform)p_transformWithAngle:(double)arg1 scale:(double)arg2 offset:(CGPoint)arg3;
- (CGColorSpace )p_colorSpace;
- (void)resetAnchorPointAtEventIndex:(NSUInteger)arg1;
- (void)adjustAnchorRelativeToCenterOfRotation:(CGPoint)arg1 atEventIndex:(NSUInteger)arg2;
@property(readonly, nonatomic) BOOL isImageSource;
@property(readonly, nonatomic) CGRect frame;
- (void)p_updateFrame;
- (void)p_initializeMap;
// - (id)copyWithZone:(_NSZone )arg1;
- (id)description;
@property(readonly, nonatomic) BOOL isValid;
- (void)dealloc;
- (void)teardown;
- (id)init;
- (id)initWithLayer:(id)arg1 forMetalTexture:(id)arg2;
- (id)initWithLayer:(id)arg1 forGLTexture:(id)arg2;
- (id)initWithMetalTexture:(id)arg1 frame:(CGRect)arg2;
- (id)initWithTextureInfo:(id)arg1 frame:(CGRect)arg2;
- (id)initWithCGImage:(CGImage )arg1;
- (id)initWithLayer:(id)arg1;
- (id)initWithSize:(CGSize)arg1 offset:(CGPoint)arg2 renderBlock:(id /* CDUnknownBlockType */)arg3;

@end

