//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Mar 22 2020 01:47:48).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <TSReading/TSDFill.h>

#import <TSReading/TSDMixing-Protocol.h>
#import <TSReading/TSSPreset-Protocol.h>
#import <TSReading/TSSPresetSource-Protocol.h>

@class NSObject, NSString, TSPData, TSUColor, TSUFlushableCachedImage;
@protocol OS_dispatch_queue;

@interface TSDImageFill : TSDFill <TSDMixing, TSSPreset, TSSPresetSource, NSCopying, NSMutableCopying>
{
    TSPData *mImageData;
    TSPData *mOriginalImageData;
    BOOL mInterpretsUntaggedImageDataAsGeneric;
    int mTechnique;
    TSUColor *mTintColor;
    TSUFlushableCachedImage *mStandardSizeTintedImage;
    TSUFlushableCachedImage *mHalfSizeTintedImage;
    TSUFlushableCachedImage *mQuarterSizeTintedImage;
    TSUColor *mReferenceColor;
    CGSize mFillSize;
    BOOL mHasIndicatedInterestInProvider;
    NSObject<OS_dispatch_queue> *mTempRenderLock;
    CGImage mTempRenderCopy;
    CGImage mSourceOfTempRenderCopy;
    long long mTempRenderCount;
}

+ (void)bootstrapPresetsOfKind:(id)arg1 inTheme:(id)arg2 alternate:(int)arg3;
+ (id)presetKinds;
@property(readonly, nonatomic) BOOL interpretsUntaggedImageDataAsGeneric; // @synthesize interpretsUntaggedImageDataAsGeneric=mInterpretsUntaggedImageDataAsGeneric;
@property(readonly, copy, nonatomic) TSUColor *tintColor; // @synthesize tintColor=mTintColor;
@property(nonatomic) int technique; // @synthesize technique=mTechnique;
@property(readonly, retain, nonatomic) TSPData *originalImageData; // @synthesize originalImageData=mOriginalImageData;
@property(readonly, retain, nonatomic) TSPData *imageData; // @synthesize imageData=mImageData;
- (void)p_drawPDFWithProvider:(id)arg1 inContext:(CGContext )arg2 bounds:(CGRect)arg3;
- (void)p_drawBitmapImage:(CGImage )arg1 withOrientation:(long long)arg2 inContext:(CGContext )arg3 bounds:(CGRect)arg4;
- (CGRect)p_drawnRectForImageSize:(CGSize)arg1 destRect:(CGRect)arg2 inContext:(CGContext )arg3;
- (id)p_validatedImageProvider;
- (void)i_flushCaches;
- (SEL)mapThemeAssetSelector;
@property(readonly, nonatomic) NSString *presetKind;
- (id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2;
- (long long)mixingTypeWithObject:(id)arg1;
- (id)p_quarterSizeCachedImage;
- (CGImage )p_newQuarterSizeImage;
- (id)p_halfSizeCachedImage;
- (CGImage )p_newHalfSizeImage;
- (id)p_standardSizeCachedImage;
- (CGImage )p_newStandardSizeImage;
- (CGImage )p_newTintedImageWithScale:(double)arg1;
- (void)paintPath:(CGPath )arg1 naturalBounds:(CGRect)arg2 inContext:(CGContext )arg3 isPDF:(BOOL)arg4;
- (void)paintPath:(CGPath )arg1 inContext:(CGContext )arg2;
- (void)addBitmapsToRenderingQualityInfo:(id)arg1 forShapeRep:(id)arg2 inContext:(CGContext )arg3;
- (void)p_paintPath:(CGPath )arg1 inContext:(CGContext )arg2;
- (CGSize)p_sizeOfFillImageForDestRect:(CGRect)arg1 inContext:(CGContext )arg2;
- (void)drawSwatchInRect:(CGRect)arg1 inContext:(CGContext )arg2;
- (CGSize)renderedImageSizeForObjectSize:(CGSize)arg1;
- (void)applyToCALayer:(id)arg1 withScale:(double)arg2;
- (id)p_cachedImageForSize:(CGSize)arg1 inContext:(CGContext )arg2 orLayer:(id)arg3;
- (BOOL)shouldBeReappliedToCALayer:(id)arg1;
- (BOOL)p_shouldApplyTintedImage;
- (int)fillType;
- (BOOL)canApplyToCALayerByAddingSublayers;
- (BOOL)canApplyToCALayer;
- (BOOL)drawsInOneStep;
- (BOOL)isEqual:(id)arg1;
- (NSUInteger)hash;
- (id)referenceColor;
- (id)imageDataAtFillSize;
- (void)p_setFillSizeForApplicationData;
- (BOOL)isOpaque;
@property(readonly, nonatomic) CGSize fillSize; // @synthesize fillSize=mFillSize;
@property(readonly, nonatomic) double scale;
// - (id)copyWithZone:(_NSZone )arg1;
- (id)mutableCopyWithZone:(_NSZone )arg1;
- (void)dealloc;
- (id)initWithGenericImageData:(id)arg1 technique:(int)arg2 tintColor:(id)arg3 size:(CGSize)arg4 originalImageData:(id)arg5;
- (id)initWithImageData:(id)arg1 technique:(int)arg2 tintColor:(id)arg3 size:(CGSize)arg4 originalImageData:(id)arg5;

@end

