//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Mar 22 2020 01:47:48).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class MPAVController, MPAVItem, MPCReportingController, NSData, NSOperationQueue, NSString;

@interface MPCReportingPlaybackObserver : NSObject
{
    NSData *_currentJingleReportingTimedMetadata;
    BOOL _hasPendingContainerChange;
    BOOL _hasSetLastPlayEventTimeStamp;
    BOOL _isReloadingWithPlaybackContext;
    BOOL _itemDidChangeWhenReloadingPlaybackContext;
    BOOL _isScrubbing;
    MPAVItem *_itemForCurrentTimeChange;
    NSOperationQueue *_recordEventOperationQueue;
    NSString *_itemContentItemIDForLastPlayEventEndTime;
    double _lastPlayEventEndTimeForCurrentItem;
    double _lastPlayEventTimeStamp;
    BOOL _shouldReportAsPlaying;
    double _startTimeForCurrentTimeChange;
    BOOL _offline;
    BOOL _SBEnabled;
    MPAVController *_player;
    MPCReportingController *_reportingController;
    NSUInteger _storeAccountID;
    NSString *_storeFrontID;
}

@property(copy, nonatomic) NSString *storeFrontID; // @synthesize storeFrontID=_storeFrontID;
@property(nonatomic) NSUInteger storeAccountID; // @synthesize storeAccountID=_storeAccountID;
@property(nonatomic, getter=isSBEnabled) BOOL SBEnabled; // @synthesize SBEnabled=_SBEnabled;
@property(readonly, nonatomic) MPCReportingController *reportingController; // @synthesize reportingController=_reportingController;
@property(nonatomic, getter=isOffline) BOOL offline; // @synthesize offline=_offline;
@property(readonly, nonatomic) MPAVController *player; // @synthesize player=_player;
// - (void).cxx_destruct;
- (double)_itemStartTimeForItem:(id)arg1;
- (double)_itemEndTimeForItem:(id)arg1 withProposedEndTime:(double)arg2;
- (void)_setLastPlayEventEndTime:(double)arg1 forItemContentItemID:(id)arg2;
- (void)_sendPlaybackEndNotification:(double)arg1 endTime:(double)arg2;
- (void)_sendPlaybackStartNotification;
- (void)_reportPlaybackEndedForTimeoutWithItem:(id)arg1;
- (id)_newReportingPlaybackActivityEventForPlayActivityEvent:(id)arg1 eventSource:(id)arg2;
- (void)_playerItemDidChangeWhenReloadingPlaybackContextNotification:(id)arg1;
- (void)_playerWillSetCurrentTimeNotification:(id)arg1;
- (void)_playerWillReloadWithPlaybackContextNotification:(id)arg1;
- (void)_playerPlaybackStateDidChangeNotification:(id)arg1;
- (void)_playerItemWillChangeNotification:(id)arg1;
- (void)_playerItemDidChangeNotification:(id)arg1;
- (void)_playerDidSetCurrentTimeNotification:(id)arg1;
- (void)_playerDidReloadWithPlaybackContextNotification:(id)arg1;
- (void)_itemReportingJingleTimedMetadataDidChangeNotification:(id)arg1;
- (void)willTransitionItemForBan:(id)arg1;
- (void)willHitPlaybackTimeoutEndingPlayback:(BOOL)arg1 withCurrentItem:(id)arg2;
- (void)recordUserSeekFromTime:(double)arg1 toTime:(double)arg2 forItem:(id)arg3;
- (void)recordPlayActivityEvents:(id)arg1 forEventSource:(id)arg2;
- (void)didTransitionItemForBan:(id)arg1;
- (void)didHitPlaybackTimeoutEndingPlayback:(BOOL)arg1 withCurrentItem:(id)arg2;
- (id)newPlayActivityEvent;
- (void)dealloc;
- (id)initWithPlayer:(id)arg1 reportingController:(id)arg2;

@end

