//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Mar 22 2020 01:47:48).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <HMFoundation/HMFObject.h>

#import <HomeAI/HMFLogging-Protocol.h>

@class HMFUnfairLock, HMIAnalysisService, HMICameraVideoAnalyzerConfiguration, HMICameraVideoAnalyzerHistory, HMICameraVideoAnalyzerScheduler, NSArray, NSDate, NSMutableArray, NSObject, NSUUID;
@protocol HMICameraVideoAnalyzerDelegate, OS_dispatch_queue;

@interface HMICameraVideoAnalyzer : HMFObject <HMFLogging>
{
    int _flagCounts[7];
    int _outcomeCounts[3];
    BOOL _skipSequentialMediaIntegrityCheck;
    BOOL _analysisInProgress;
    BOOL _inErrorState;
    BOOL _inBypassMode;
    BOOL _sessionEnded;
    BOOL _uploadVideoAnalysisEvent;
    BOOL _saveVideoFramesToDisk;
    id <HMICameraVideoAnalyzerDelegate> _delegate;
    NSUUID *_identifier;
    HMFUnfairLock *_lock;
    NSMutableArray *_internalPendingRequests;
    NSDate *_lastRequestSubmissionTime;
    HMICameraVideoAnalyzerHistory *_history;
    NSObject<OS_dispatch_queue> *_workQueue;
    HMICameraVideoAnalyzerScheduler *_scheduler;
    NSUInteger _mediaIntegritySequenceNumber;
    HMICameraVideoAnalyzerConfiguration *_configuration;
    HMIAnalysisService *_remoteAnalysisService;
}

+ (id)logCategory;
+ (id)queryVersionInformation;
+ (long long)confidenceThatEventOccurred:(long long)arg1 events:(long long)arg2 annotationScores:(id)arg3;
@property(getter=shouldSaveVideoFramesToDisk) BOOL saveVideoFramesToDisk; // @synthesize saveVideoFramesToDisk=_saveVideoFramesToDisk;
@property(readonly, getter=shouldUploadVideoAnalysisEvent) BOOL uploadVideoAnalysisEvent; // @synthesize uploadVideoAnalysisEvent=_uploadVideoAnalysisEvent;
@property BOOL sessionEnded; // @synthesize sessionEnded=_sessionEnded;
@property(retain, nonatomic) HMIAnalysisService *remoteAnalysisService; // @synthesize remoteAnalysisService=_remoteAnalysisService;
@property(retain) HMICameraVideoAnalyzerConfiguration *configuration; // @synthesize configuration=_configuration;
@property BOOL inBypassMode; // @synthesize inBypassMode=_inBypassMode;
@property BOOL inErrorState; // @synthesize inErrorState=_inErrorState;
@property BOOL analysisInProgress; // @synthesize analysisInProgress=_analysisInProgress;
@property(readonly) BOOL skipSequentialMediaIntegrityCheck; // @synthesize skipSequentialMediaIntegrityCheck=_skipSequentialMediaIntegrityCheck;
@property NSUInteger mediaIntegritySequenceNumber; // @synthesize mediaIntegritySequenceNumber=_mediaIntegritySequenceNumber;
@property(readonly) HMICameraVideoAnalyzerScheduler *scheduler; // @synthesize scheduler=_scheduler;
@property(readonly) NSObject<OS_dispatch_queue> *workQueue; // @synthesize workQueue=_workQueue;
@property(readonly) HMICameraVideoAnalyzerHistory *history; // @synthesize history=_history;
@property(retain) NSDate *lastRequestSubmissionTime; // @synthesize lastRequestSubmissionTime=_lastRequestSubmissionTime;
@property(readonly) NSMutableArray *internalPendingRequests; // @synthesize internalPendingRequests=_internalPendingRequests;
@property(readonly, nonatomic) HMFUnfairLock *lock; // @synthesize lock=_lock;
@property(readonly, copy) NSUUID *identifier; // @synthesize identifier=_identifier;
@property __weak id <HMICameraVideoAnalyzerDelegate> delegate; // @synthesize delegate=_delegate;
// - (void).cxx_destruct;
- (id)_flagCountsAsString;
- (id)_outcomeCountsAsString;
- (void)_sendAnalyticsEventForRequest:(id)arg1 outcome:(long long)arg2 result:(id)arg3 error:(id)arg4;
- (id)logIdentifier;
- (BOOL)_saveVideoFrame:(id)arg1 videoFragment:(id)arg2 error:(id )arg3;
- (BOOL)_analyzeVideoFrame:(id)arg1 request:(id)arg2 result:(id )arg3 error:(id )arg4;
- (id)_analyzeFrame:(id)arg1 request:(id)arg2 error:(id )arg3;
- (BOOL)_analyzeRequestFrames:(id)arg1;
- (void)_analyzeRequestFramesLocally:(id)arg1;
- (BOOL)_shouldContinueAnalyzingRequest:(id)arg1 resultCode:(long long )arg2;
- (void)_markPendingRequestsWithFlag:(long long)arg1;
- (void)_enterErrorState;
- (void)_notifyDidFailAnalysisForRequest:(id)arg1 withError:(id)arg2;
- (void)_notifyDidNotAnalyzeRequest:(id)arg1 withResult:(id)arg2;
- (void)_notifyDidAnalyzeRequest:(id)arg1 withResult:(id)arg2;
- (void)_requestDidEnd:(id)arg1 outcome:(long long)arg2;
- (void)_handleError:(long long)arg1 request:(id)arg2 description:(id)arg3 underlyingError:(id)arg4;
- (void)_handleError:(long long)arg1 request:(id)arg2 underlyingError:(id)arg3;
- (void)_handleError:(long long)arg1 request:(id)arg2 description:(id)arg3;
- (void)_handleError:(long long)arg1 request:(id)arg2;
- (void)_handleDidNotAnalyzeRequest:(id)arg1 withResult:(id)arg2 error:(id)arg3;
- (void)_handleDidNotAnalyzeRequest:(id)arg1 resultCode:(long long)arg2 error:(id)arg3;
- (void)_handleDidNotAnalyzeRequest:(id)arg1 resultCode:(long long)arg2;
- (void)_handleDidAnalyzeRequest:(id)arg1 withResult:(id)arg2;
- (void)_handleDidAnalyzeRequest:(id)arg1;
- (void)_predictRequest:(id)arg1;
- (void)_willAnalyzeRequest:(id)arg1;
- (void)_analyzeRequestLocally:(id)arg1;
- (void)_analyzeRequestRemotely:(id)arg1 retryOnConnectionInterruption:(BOOL)arg2;
- (void)_analyzeRequest:(id)arg1;
- (void)processPendingRequests;
- (NSUInteger)pendingRequestsCount;
- (BOOL)_checkRequest:(id)arg1;
- (void)clearPendingFragments;
@property(readonly) NSArray *pendingRequests;
@property(readonly) BOOL isActive;
- (void)_scheduleRequest:(id)arg1;
- (void)analyzeFragment:(id)arg1;
- (id)initWithConfiguration:(id)arg1 identifier:(id)arg2;

@end

