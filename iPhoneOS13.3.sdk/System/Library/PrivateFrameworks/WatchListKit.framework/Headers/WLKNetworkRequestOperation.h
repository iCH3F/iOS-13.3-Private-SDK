//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Mar 22 2020 01:47:48).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <WatchListKit/WLKAsyncOperation.h>

@class AMSURLRequestEncoder, AMSURLSession, NSData, NSDate, NSError, NSHTTPURLResponse, NSNumber, NSString, NSURLRequest, NSURLSessionDataTask;

@interface WLKNetworkRequestOperation : WLKAsyncOperation
{
    NSString *_identifier;
    NSNumber *_DSID;
    NSURLRequest *_request;
    long long _options;
    NSHTTPURLResponse *_httpResponse;
    long long _responseStatusCode;
    NSData *_data;
    NSError *_error;
    AMSURLRequestEncoder *_encoder;
    AMSURLSession *_session;
    NSURLSessionDataTask *_task;
    NSDate *_startDate;
    NSUInteger _signpostIdentifier;
}

@property(nonatomic) NSUInteger signpostIdentifier; // @synthesize signpostIdentifier=_signpostIdentifier;
@property(retain, nonatomic) NSDate *startDate; // @synthesize startDate=_startDate;
@property(retain, nonatomic) NSURLSessionDataTask *task; // @synthesize task=_task;
@property(retain, nonatomic) AMSURLSession *session; // @synthesize session=_session;
@property(retain, nonatomic) AMSURLRequestEncoder *encoder; // @synthesize encoder=_encoder;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(retain, nonatomic) NSData *data; // @synthesize data=_data;
@property(nonatomic) long long responseStatusCode; // @synthesize responseStatusCode=_responseStatusCode;
@property(retain, nonatomic) NSHTTPURLResponse *httpResponse; // @synthesize httpResponse=_httpResponse;
@property(readonly, nonatomic) long long options; // @synthesize options=_options;
@property(copy, nonatomic) NSURLRequest *request; // @synthesize request=_request;
@property(copy, nonatomic) NSNumber *DSID; // @synthesize DSID=_DSID;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
// - (void).cxx_destruct;
- (void)cancel;
- (void)finishExecutionIfPossible;
- (void)executionDidBegin;
- (long long)_statusCodeForAMSResult:(id)arg1 error:(id)arg2;
- (void)_finishExecutionIfPossibleWithError:(id)arg1;
- (void)_startNetworkRequest;
- (void)handleResult:(id)arg1 error:(id)arg2;
- (void)processResponse;
- (void)prepareAndStartNetworkRequest;
- (void)configureSession;
- (void)prepareURLRequest:(id /* CDUnknownBlockType */)arg1;
- (id)initWithURLRequest:(id)arg1 options:(long long)arg2;
- (id)init;

@end

