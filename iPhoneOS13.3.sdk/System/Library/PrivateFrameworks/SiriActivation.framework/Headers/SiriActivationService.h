//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Mar 22 2020 01:47:48).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <SiriActivation/AFMyriadDelegate-Protocol.h>
#import <SiriActivation/SASBulletinManagerDelegate-Protocol.h>
#import <SiriActivation/SASHeaterDelegate-Protocol.h>
#import <SiriActivation/SASLockStateMonitorDelegate-Protocol.h>
#import <SiriActivation/SASRequestOptionsBuilderDataSource-Protocol.h>
#import <SiriActivation/SASStateChangeListener-Protocol.h>

@class AFMyriadCoordinator, AFPreferences, AFSiriTether, AFWatchdogTimer, NSMutableDictionary, NSMutableSet, NSString, NSTimer, SASBulletinManager, SASHeater, SASLockStateMonitor, SASMyriadController, SASRemoteRequestManager, SASSystemState, SASTestingInputController;
@protocol OS_dispatch_queue;

@interface SiriActivationService : NSObject <SASRequestOptionsBuilderDataSource, SASHeaterDelegate, AFMyriadDelegate, SASLockStateMonitorDelegate, SASBulletinManagerDelegate, SASStateChangeListener>
{
    id /* CDUnknownBlockType */ _buttonTrigger;
    NSString *_preheatedPresentation;
    int _voiceTriggerNotifyToken;
    AFMyriadCoordinator *_myriad;
    NSObject<OS_dispatch_queue> *_voiceTriggerDispatchQueue;
    NSObject<OS_dispatch_queue> *_watchdogQueue;
    NSTimer *_B188ActivationTimer;
    SASMyriadController *_myriadController;
    BOOL _xcTestingActive;
    BOOL _siriTetherIsAttached;
    BOOL _voiceTriggerNotifyTokenIsValid;
    BOOL _buttonDownHasOccurredSinceActivation;
    BOOL _canActivateFromDirectActionSource;
    BOOL _pocketStateFetchingInProgressForHeadsetActivation;
    SASSystemState *_systemState;
    AFPreferences *_afPreferences;
    SASLockStateMonitor *_lockStateMonitor;
    NSMutableDictionary *_presentations;
    NSMutableSet *_activePresentations;
    NSMutableDictionary *_preparingPresentations;
    long long _requestState;
    NSMutableDictionary *_sources;
    SASHeater *_heater;
    AFSiriTether *_siriTether;
    double _preparationTimestamp;
    double _activationTimestamp;
    SASBulletinManager *_bulletinManager;
    SASRemoteRequestManager *_remoteRequestManager;
    SASTestingInputController *_testingInputController;
    AFWatchdogTimer *_activationTimer;
    AFWatchdogTimer *_dismissalTimer;
    NSMutableDictionary *_avExternalButtonEvents;
}

+ (id)new;
+ (id)service;
@property(nonatomic, getter=_pocketStateFetchingInProgressForHeadsetActivation, setter=_setPocketStateFetchingInProgressForHeadsetActivation:) BOOL pocketStateFetchingInProgressForHeadsetActivation; // @synthesize pocketStateFetchingInProgressForHeadsetActivation=_pocketStateFetchingInProgressForHeadsetActivation;
@property(nonatomic) BOOL canActivateFromDirectActionSource; // @synthesize canActivateFromDirectActionSource=_canActivateFromDirectActionSource;
@property(nonatomic) BOOL buttonDownHasOccurredSinceActivation; // @synthesize buttonDownHasOccurredSinceActivation=_buttonDownHasOccurredSinceActivation;
@property(retain, nonatomic) NSMutableDictionary *avExternalButtonEvents; // @synthesize avExternalButtonEvents=_avExternalButtonEvents;
@property(retain, nonatomic) AFWatchdogTimer *dismissalTimer; // @synthesize dismissalTimer=_dismissalTimer;
@property(retain, nonatomic) AFWatchdogTimer *activationTimer; // @synthesize activationTimer=_activationTimer;
@property(retain, nonatomic) SASTestingInputController *testingInputController; // @synthesize testingInputController=_testingInputController;
@property(retain, nonatomic) SASRemoteRequestManager *remoteRequestManager; // @synthesize remoteRequestManager=_remoteRequestManager;
@property(retain, nonatomic) SASBulletinManager *bulletinManager; // @synthesize bulletinManager=_bulletinManager;
@property(nonatomic) BOOL voiceTriggerNotifyTokenIsValid; // @synthesize voiceTriggerNotifyTokenIsValid=_voiceTriggerNotifyTokenIsValid;
@property(nonatomic) double activationTimestamp; // @synthesize activationTimestamp=_activationTimestamp;
@property(nonatomic) double preparationTimestamp; // @synthesize preparationTimestamp=_preparationTimestamp;
@property(nonatomic) BOOL siriTetherIsAttached; // @synthesize siriTetherIsAttached=_siriTetherIsAttached;
@property(retain, nonatomic) AFSiriTether *siriTether; // @synthesize siriTether=_siriTether;
@property(retain, nonatomic) SASHeater *heater; // @synthesize heater=_heater;
@property(retain, nonatomic) NSMutableDictionary *sources; // @synthesize sources=_sources;
@property(nonatomic) long long requestState; // @synthesize requestState=_requestState;
@property(retain, nonatomic) NSMutableDictionary *preparingPresentations; // @synthesize preparingPresentations=_preparingPresentations;
@property(retain, nonatomic) NSMutableSet *activePresentations; // @synthesize activePresentations=_activePresentations;
@property(retain, nonatomic) NSMutableDictionary *presentations; // @synthesize presentations=_presentations;
@property(nonatomic) BOOL xcTestingActive; // @synthesize xcTestingActive=_xcTestingActive;
@property(retain, nonatomic) SASLockStateMonitor *lockStateMonitor; // @synthesize lockStateMonitor=_lockStateMonitor;
@property(retain, nonatomic) AFPreferences *afPreferences; // @synthesize afPreferences=_afPreferences;
@property(retain, nonatomic) SASSystemState *systemState; // @synthesize systemState=_systemState;
// - (void).cxx_destruct;
- (void)callStateChangedToIsActive:(BOOL)arg1 isOutgoing:(BOOL)arg2;
- (void)bulletinManagerDidChangeBulletins:(id)arg1;
- (void)markBulletinWithIdentifier:(id)arg1 asRead:(BOOL)arg2;
- (id)bulletinForIdentifier:(id)arg1;
- (id)bulletinsOnLockScreen;
- (id)allBulletins;
- (void)_watchdogQueue_stopDismissalWatchdogTimerIfNeeded;
- (void)stopDismissalWatchdogTimerIfNeeded;
- (void)_watchdogQueue_startDismissalWatchdogTimer;
- (void)startDismissalWatchdogTimer;
- (void)_watchdogQueue_stopActivationWatchdogTimerIfNeeded;
- (void)stopActivationWatchdogTimerIfNeeded;
- (void)_watchdogQueue_startActivationWatchdogTimerForPresentationServer:(id)arg1;
- (void)startActivationWatchdogTimerForPresentationServer:(id)arg1;
- (void)didChangeLockState:(NSUInteger)arg1;
- (void)shouldContinue:(id)arg1;
- (void)shouldAbortAnotherDeviceBetter:(id)arg1;
- (void)_unregisterForVoiceTrigger;
- (void)_registerForVoiceTrigger;
- (oneway void)activationRequestFromTestRunnerWithContext:(id)arg1;
- (void)heaterSuggestsPreheating:(id)arg1;
- (void)heaterSuggestsDefrosting:(id)arg1;
- (BOOL)_isInitialRequest;
- (NSUInteger)requestOptionsBuilder:(id)arg1 currentLockStateForActivation:(id)arg2;
- (id)requestOptionsBuilder:(id)arg1 optionsForOverriding:(id)arg2 withActiviation:(id)arg3;
- (id)requestOptionsBuilder:(id)arg1 uiPresentationIdentifierWithActivation:(id)arg2 activationPresentation:(long long)arg3;
- (BOOL)requestOptionsBuilder:(id)arg1 isAcousticIdAllowedWithActiviation:(id)arg2;
- (BOOL)requestOptionsBuilder:(id)arg1 isPredictedRecordRouteIsZLLWithActiviation:(id)arg2;
- (BOOL)requestOptionsBuilder:(id)arg1 isRequestInitialWithActiviation:(id)arg2;
- (BOOL)requestOptionsBuilder:(id)arg1 shouldRequestUseAutomaticEndpointingWithActiviation:(id)arg2;
- (BOOL)_siriIsEnabled;
- (void)_handleDesignModeRequest;
- (void)_cancelPendingActivationEventWithReason:(NSUInteger)arg1;
- (void)_cancelActivationPreparationForSetup;
- (void)_cancelActivationPreparationIfNecessary;
- (void)_attachToTether;
- (void)_preheatPresentation;
- (void)_cancelTTS;
- (void)_dismissSiri:(id)arg1;
- (void)_handlePocketStateFetchForScreenWakeForPresentationServer:(id)arg1 requestOptions:(id)arg2 presentationOptions:(id)arg3;
- (void)_activatePresentation:(id)arg1 requestOptions:(id)arg2 analyticsContext:(id)arg3;
- (void)dismissSiriWithOptions:(id)arg1;
- (BOOL)handleActivationRequest:(id)arg1 systemState:(id)arg2;
- (BOOL)handleActivationRequest:(id)arg1;
- (void)speechRequestStateDidChange:(long long)arg1;
- (void)activationRequestFromTestingWithContext:(id)arg1;
- (void)activationRequestFromVoiceTrigger;
- (void)activationRequestFromSpotlightWithContext:(id)arg1;
- (void)activationRequestFromSimpleActivation:(long long)arg1;
- (void)activationRequestFromBreadcrumb;
- (void)activationRequestFromVoiceTriggerWithContext:(id)arg1;
- (void)activationRequestFromContinuityWithContext:(id)arg1;
- (void)activationRequestFromDirectActionEvent:(long long)arg1 context:(id)arg2 completion:(id /* CDUnknownBlockType */)arg3;
- (BOOL)_buttonIsAVExternalButton:(long long)arg1;
- (void)_recordTimeIfNeededForButtonIdentifier:(long long)arg1 buttonDownTimestamp:(double)arg2;
- (void)_handleTapSynthesisIfNeededForButtonIdentifier:(long long)arg1 buttonUpTimestamp:(double)arg2;
- (void)buttonLongPressFromButtonIdentifier:(long long)arg1 context:(id)arg2;
- (void)buttonTapFromButtonIdentifier:(long long)arg1;
- (void)buttonUpFromButtonIdentifier:(long long)arg1 timestamp:(double)arg2;
- (void)buttonDownFromButtonIdentifier:(long long)arg1 timestamp:(double)arg2;
- (void)_performOrEnqueueButtonAction:(id /* CDUnknownBlockType */)arg1;
- (void)cancelPrewarmFromButtonIdentifier:(long long)arg1;
- (void)prewarmFromButtonIdentifier:(long long)arg1 longPressInterval:(double)arg2;
- (void)deactivationRequestFromButtonIdentifier:(long long)arg1 context:(id)arg2 options:(id)arg3;
- (void)activationRequestFromButtonIdentifier:(long long)arg1 context:(id)arg2;
- (void)_B188ActivationEvent:(long long)arg1 context:(id)arg2 options:(id)arg3;
- (BOOL)isConnectedTo188;
- (BOOL)presentationsAreIdleAndQuiet;
- (void)unregisterActivationSourceIdentifier:(id)arg1;
- (void)registerActivationSource:(id)arg1 withIdentifier:(id)arg2;
- (void)siriPresentationFailureWithIdentifier:(long long)arg1 error:(id)arg2;
- (void)siriPresentationDismissedWithIdentifier:(long long)arg1;
- (void)siriPresentationWillDismissWithIdentifier:(long long)arg1;
- (void)siriPresentationDisplayedWithIdentifier:(long long)arg1;
- (void)unregisterSiriPresentationIdentifier:(long long)arg1;
- (void)registerSiriPresentation:(id)arg1 withIdentifier:(long long)arg2;
- (void)_notifySourcesOfCanActivateFromDirectActionSourceChange:(BOOL)arg1;
- (void)_updateCanActivateFromDirectActionSource;
- (void)_notifySourcesOfActiveChange:(BOOL)arg1;
- (BOOL)_shouldRejectNewActivations:(long long)arg1;
- (void)dealloc;
- (id)init;
- (id)_init;

@end

