//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Mar 22 2020 01:47:48).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <iTunesStore/ISURLOperation.h>

#import <iTunesStore/ISBiometricSessionDelegate-Protocol.h>

@class NSNumber, SSBag, SSBiometricAuthenticationContext, SSURLBagContext, SSVFairPlaySAPSession;
@protocol ISBiometricSessionDelegate;

@interface ISStoreURLOperation : ISURLOperation <ISBiometricSessionDelegate>
{
    long long _activeMachineDataStyle;
    NSNumber *_authenticatedDSID;
    BOOL _canSendGUIDParameter;
    BOOL _ignorePreexistingSecureToken;
    BOOL _isURLBagRequest;
    long long _machineDataStyle;
    BOOL _needsAuthentication;
    BOOL _needsURLBag;
    SSVFairPlaySAPSession *_sapSession;
    BOOL _shouldAppendAuthKitHeaders;
    BOOL _shouldAppendStorefrontToURL;
    BOOL _shouldSendXTokenHeader;
    BOOL _urlKnownToBeTrusted;
    BOOL _useUserSpecificURLBag;
    BOOL _needsTermsAndConditionsAcceptance;
    BOOL _shouldCancelBiometricTokenUpdate;
    BOOL _shouldSuppressUserInfo;
    BOOL _shouldSendAKClientInfoHeaders;
    BOOL _shouldSendDSIDHeader;
    SSBiometricAuthenticationContext *_biometricAuthenticationContext;
    id <ISBiometricSessionDelegate> _biometricSessionDelegate;
    SSBag *_bag;
}

+ (id)_storeFrontIdentifierForAccount:(id)arg1;
+ (void)_performMachineDataRequest:(id)arg1 requestProperties:(id)arg2 completion:(id /* CDUnknownBlockType */)arg3;
+ (BOOL)_operationWaitsForPurchases:(id)arg1;
+ (void)_handleResponseHeaders:(id)arg1 response:(id)arg2 request:(id)arg3 account:(id)arg4 performsMachineDataActions:(BOOL)arg5 shouldRetry:(BOOL )arg6;
+ (id)_authKitSession;
+ (id)_restrictionsHeaderValue;
+ (void)_appendStorefront:(id)arg1 toRequestURL:(id)arg2;
+ (void)_addPrimaryiCloudDSIDToRequest:(id)arg1;
+ (void)_addiTunesStoreHeadersToRequest:(id)arg1 withURLBag:(id)arg2 account:(id)arg3 appendAuthKitHeaders:(BOOL)arg4 appendStorefrontToURL:(BOOL)arg5 clientBundleIdentifier:(id)arg6;
+ (void)_addiTunesStoreHeadersToRequest:(id)arg1 withAccount:(id)arg2 appendAuthKitHeaders:(BOOL)arg3 appendStorefrontToURL:(BOOL)arg4 clientBundleIdentifier:(id)arg5 extraHeaders:(id)arg6 storefrontSuffix:(id)arg7;
+ (void)_addAccountDSID:(id)arg1 toRequest:(id)arg2;
+ (void)_addiTunesStoreHeadersToRequest:(id)arg1 withURLBag:(id)arg2 accountIdentifier:(id)arg3 appendAuthKitHeaders:(BOOL)arg4 appendStorefrontToURL:(BOOL)arg5 clientBundleIdentifier:(id)arg6;
+ (void)_addiTunesStoreHeadersToRequest:(id)arg1 withSSBag:(id)arg2 account:(id)arg3 appendAuthKitHeaders:(BOOL)arg4 appendStorefrontToURL:(BOOL)arg5 clientBundleIdentifier:(id)arg6;
+ (void)_addiTunesStoreHeadersToRequest:(id)arg1 withSSBag:(id)arg2 accountIdentifier:(id)arg3 appendAuthKitHeaders:(BOOL)arg4 appendStorefrontToURL:(BOOL)arg5 clientBundleIdentifier:(id)arg6;
+ (id)_ssBag_copyExtraHeadersForURL:(id)arg1 bag:(id)arg2;
+ (id)_ssBag_copyHeaderPatternsFromBag:(id)arg1;
+ (id)propertyListOperationWithURLBagKey:(id)arg1;
+ (id)pingOperationWithUrl:(id)arg1;
+ (id)itemPingOperationWithIdentifier:(NSUInteger)arg1 urlBagKey:(id)arg2;
+ (void)handleITunesStoreResponseHeaders:(id)arg1 request:(id)arg2 withAccountIdentifier:(id)arg3 shouldRetry:(BOOL )arg4;
+ (void)addITunesStoreHeadersToRequest:(id)arg1 withAccountIdentifier:(id)arg2;
@property(retain, nonatomic) SSBag *bag; // @synthesize bag=_bag;
@property BOOL shouldSendDSIDHeader; // @synthesize shouldSendDSIDHeader=_shouldSendDSIDHeader;
@property BOOL shouldSendAKClientInfoHeaders; // @synthesize shouldSendAKClientInfoHeaders=_shouldSendAKClientInfoHeaders;
@property BOOL shouldSuppressUserInfo; // @synthesize shouldSuppressUserInfo=_shouldSuppressUserInfo;
@property long long machineDataStyle; // @synthesize machineDataStyle=_machineDataStyle;
@property __weak id <ISBiometricSessionDelegate> biometricSessionDelegate; // @synthesize biometricSessionDelegate=_biometricSessionDelegate;
@property BOOL useUserSpecificURLBag; // @synthesize useUserSpecificURLBag=_useUserSpecificURLBag;
@property BOOL urlKnownToBeTrusted; // @synthesize urlKnownToBeTrusted=_urlKnownToBeTrusted;
@property(nonatomic, getter=isURLBagRequest) BOOL URLBagRequest; // @synthesize URLBagRequest=_isURLBagRequest;
@property BOOL shouldCancelBiometricTokenUpdate; // @synthesize shouldCancelBiometricTokenUpdate=_shouldCancelBiometricTokenUpdate;
@property(nonatomic) BOOL shouldAppendStorefrontToURL; // @synthesize shouldAppendStorefrontToURL=_shouldAppendStorefrontToURL;
@property(nonatomic) BOOL shouldAppendAuthKitHeaders; // @synthesize shouldAppendAuthKitHeaders=_shouldAppendAuthKitHeaders;
@property BOOL needsURLBag; // @synthesize needsURLBag=_needsURLBag;
@property BOOL needsTermsAndConditionsAcceptance; // @synthesize needsTermsAndConditionsAcceptance=_needsTermsAndConditionsAcceptance;
@property BOOL needsAuthentication; // @synthesize needsAuthentication=_needsAuthentication;
@property(retain) SSBiometricAuthenticationContext *biometricAuthenticationContext; // @synthesize biometricAuthenticationContext=_biometricAuthenticationContext;
@property(retain) NSNumber *authenticatedDSID; // @synthesize authenticatedDSID=_authenticatedDSID;
// - (void).cxx_destruct;
- (id)_urlBagForContext:(id)arg1;
- (BOOL)_shouldRetryForTouchIDChallengeWithError:(id)arg1;
- (BOOL)_shouldRetryForAbsintheWithResponse:(id)arg1;
- (void)_runURLOperation;
- (id)_resolvedURLInBagContext:(id)arg1 bagTrusted:(BOOL )arg2;
- (BOOL)_performMachineDataRequest:(id)arg1;
- (id)_loadURLBagInterpreterWithRequest:(id)arg1 requestProperties:(id)arg2;
- (BOOL)_isErrorTokenError:(id)arg1;
- (id)_copyAuthenticationContextForAttemptNumber:(long long)arg1;
- (void)_continueTouchIDSession;
- (id)_buyParams;
- (BOOL)_canSendTokenToURL:(id)arg1;
- (BOOL)_authenticateWithContext:(id)arg1 error:(id )arg2;
- (void)_addStandardQueryParametersForURL:(id)arg1;
- (id)_account;
- (id)_absintheHeaders;
- (void)_setStoreFrontIdentifier:(id)arg1 isTransient:(BOOL)arg2;
- (BOOL)_ssBag_shouldSendGUIDForURL:(id)arg1 withBag:(id)arg2;
- (id)_ssBag_copyGUIDPatternsFromBag:(id)arg1;
- (id)_ssBag_copyGUIDSchemesFromBag:(id)arg1;
- (void)sender:(id)arg1 didFallbackToPassword:(BOOL)arg2;
- (void)_willSendRequest:(id)arg1;
- (BOOL)shouldFollowRedirectWithRequest:(id)arg1 returningError:(id )arg2;
- (void)run;
- (BOOL)_processResponseData:(id)arg1 error:(id )arg2;
- (id)newRequestWithURL:(id)arg1;
- (void)handleResponse:(id)arg1;
- (BOOL)handleRedirectFromDataProvider:(id)arg1 error:(id )arg2;
- (id)_copyAuthenticationContext;
- (id)authenticatedAccountDSID;
@property(readonly) SSURLBagContext *URLBagContext;
@property BOOL shouldSendXTokenHeader;
@property(retain) SSVFairPlaySAPSession *SAPSession;
@property BOOL performsMachineDataActions;
@property(nonatomic) BOOL ignorePreexistingSecureToken;
@property BOOL canSendGUIDParameter;
- (id)logKey;
- (id)init;

@end

