//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Mar 22 2020 01:47:48).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <GameCenterFoundation/GKSessionDelegate-Protocol.h>

@class GKGame, GKPlayer, GKTurnBasedMatchInternal, GKTurnBasedParticipant, NSArray, NSDate, NSString;

@interface GKTurnBasedMatch : NSObject <GKSessionDelegate>
{
    unsigned int _state;
    GKTurnBasedMatchInternal *_internal;
    NSArray *_participants;
    NSArray *_exchanges;
}

+ (void)loadTurnBasedMatchWithDetailsForMatchID:(id)arg1 withCompletionHandler:(id /* CDUnknownBlockType */)arg2;
+ (id)keyPathsForValuesAffectingStatus;
+ (id)_localizableMessageWithKey:(id)arg1 arguments:(id)arg2 defaultMessage:(id)arg3;
+ (BOOL)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (void)loadMatchWithID:(id)arg1 withCompletionHandler:(id /* CDUnknownBlockType */)arg2;
+ (void)loadTurnBasedMatchDetailsForMatchIDs:(id)arg1 loadGameData:(BOOL)arg2 withCompletionHandler:(id /* CDUnknownBlockType */)arg3;
+ (void)loadTurnBasedMatchSummariesIncludingCompatibleBundleID:(BOOL)arg1 withCompletionHandler:(id /* CDUnknownBlockType */)arg2;
+ (void)loadTurnBasedMatchSummaries:(id /* CDUnknownBlockType */)arg1;
+ (void)loadMatchesIncludingCompatibleBundleID:(BOOL)arg1 withCompletionHandler:(id /* CDUnknownBlockType */)arg2;
+ (void)loadMatchesWithCompletionHandler:(id /* CDUnknownBlockType */)arg1;
+ (void)findMatchForRequest:(id)arg1 withCompletionHandler:(id /* CDUnknownBlockType */)arg2;
+ (id)matchesWithInternalRepresentations:(id)arg1;
+ (void)getTurnBasedBadgeCountWithHandler:(id /* CDUnknownBlockType */)arg1;
@property(readonly, retain, nonatomic) NSArray *exchanges; // @synthesize exchanges=_exchanges;
@property(readonly, retain, nonatomic) NSArray *participants; // @synthesize participants=_participants;
- (void)sendReminderToParticipants:(id)arg1 localizableMessageKey:(id)arg2 arguments:(id)arg3 completionHandler:(id /* CDUnknownBlockType */)arg4;
- (void)sendExchangeToParticipants:(id)arg1 data:(id)arg2 localizableMessageKey:(id)arg3 arguments:(id)arg4 timeout:(double)arg5 completionHandler:(id /* CDUnknownBlockType */)arg6;
- (void)saveMergedMatchData:(id)arg1 withResolvedExchanges:(id)arg2 completionHandler:(id /* CDUnknownBlockType */)arg3;
- (id)exchangeForID:(id)arg1;
- (void)saveCurrentTurnWithMatchData:(id)arg1 completionHandler:(id /* CDUnknownBlockType */)arg2;
- (void)endMatchInTurnWithMatchData:(id)arg1 scores:(id)arg2 achievements:(id)arg3 completionHandler:(id /* CDUnknownBlockType */)arg4;
- (void)endMatchInTurnWithMatchData:(id)arg1 completionHandler:(id /* CDUnknownBlockType */)arg2;
- (void)participantQuitOutOfTurnWithOutcome:(long long)arg1 withCompletionHandler:(id /* CDUnknownBlockType */)arg2;
- (void)participantQuitInTurnWithOutcome:(long long)arg1 nextParticipants:(id)arg2 turnTimeout:(double)arg3 matchData:(id)arg4 completionHandler:(id /* CDUnknownBlockType */)arg5;
- (void)participantQuitInTurnWithOutcome:(long long)arg1 nextParticipant:(id)arg2 matchData:(id)arg3 completionHandler:(id /* CDUnknownBlockType */)arg4;
- (void)endTurnWithNextParticipants:(id)arg1 turnTimeout:(double)arg2 matchData:(id)arg3 completionHandler:(id /* CDUnknownBlockType */)arg4;
- (id)indexesForParticipants:(id)arg1;
- (void)endTurnWithNextParticipant:(id)arg1 matchData:(id)arg2 completionHandler:(id /* CDUnknownBlockType */)arg3;
- (void)reserveShareParticipantSlots:(long long)arg1 minPlayerCount:(long long)arg2 maxPlayerCount:(long long)arg3 andInvitePlayers:(id)arg4 withMessage:(id)arg5 handler:(id /* CDUnknownBlockType */)arg6;
- (void)loadURLWithMatchRequest:(id)arg1 completionHandler:(id /* CDUnknownBlockType */)arg2;
- (void)loadMatchDataWithCompletionHandler:(id /* CDUnknownBlockType */)arg1;
- (void)removeWithCompletionHandler:(id /* CDUnknownBlockType */)arg1;
@property(readonly, retain, nonatomic) NSArray *completedExchanges;
@property(readonly, retain, nonatomic) NSArray *activeExchanges;
@property(readonly, nonatomic) GKTurnBasedParticipant *firstWinnerOrTiedOrLastLoser;
@property(readonly, nonatomic) GKPlayer *showcasePlayer;
@property(readonly, nonatomic) GKTurnBasedParticipant *localPlayerParticipant;
@property(readonly, nonatomic) GKTurnBasedParticipant *playingWithParticipantOrFirstKnownPlayer;
@property(readonly, nonatomic) GKTurnBasedParticipant *previousParticipantOrFirstKnownPlayer;
@property(readonly, nonatomic) GKTurnBasedParticipant *previousParticipant;
@property(retain, nonatomic) GKTurnBasedParticipant *currentParticipant;
- (void)declineInviteWithCompletionHandler:(id /* CDUnknownBlockType */)arg1;
- (void)acceptInviteWithCompletionHandler:(id /* CDUnknownBlockType */)arg1;
- (void)rematchWithCompletionHandler:(id /* CDUnknownBlockType */)arg1;
@property(readonly, nonatomic) NSDate *dateSortKey;
- (long long)compare:(id)arg1;
@property(readonly, nonatomic) long long status; // @dynamic status;
@property(readonly, copy) NSString *description;
@property(readonly, nonatomic) GKPlayer *currentPlayer; // @dynamic currentPlayer;
- (void)dealloc;
@property(nonatomic) unsigned int state; // @synthesize state=_state;
- (void)setLocalizableMessageWithKey:(id)arg1 arguments:(id)arg2;
@property(copy, nonatomic) NSString *message;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (BOOL)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
@property(readonly, nonatomic) GKGame *game; // @dynamic game;
@property(readonly, nonatomic) BOOL localPlayerHasRecentTurn;
@property(readonly, nonatomic) BOOL isMyTurn; // @dynamic isMyTurn;
- (id)_exchangesForInternalRepresentation:(id)arg1 participants:(id)arg2;
- (id)_participantsForInternalRepresentation:(id)arg1;
- (void)_updateWithInternal:(id)arg1;
@property(retain) GKTurnBasedMatchInternal *internal; // @synthesize internal=_internal;
- (BOOL)isEqual:(id)arg1;
@property(readonly) NSUInteger hash;
- (id)init;
- (id)initWithInternalRepresentation:(id)arg1;
@property(readonly, nonatomic) NSUInteger exchangeMaxInitiatedExchangesPerPlayer; // @dynamic exchangeMaxInitiatedExchangesPerPlayer;
@property(readonly, nonatomic) NSUInteger exchangeDataMaximumSize; // @dynamic exchangeDataMaximumSize;
@property(nonatomic) NSUInteger matchDataMaximumSize; // @dynamic matchDataMaximumSize;

@end

