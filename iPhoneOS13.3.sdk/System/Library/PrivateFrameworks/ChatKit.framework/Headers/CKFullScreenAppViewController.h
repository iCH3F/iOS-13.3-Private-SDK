//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Mar 22 2020 01:47:48).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <UIKit/UIViewController.h>

#import <ChatKit/CKAppGrabberViewDelegate-Protocol.h>
#import <ChatKit/CKBrowserViewControllerProtocol-Protocol.h>
#import <ChatKit/CKFullScreenAppNavbarManagerDelegate-Protocol.h>
#import <ChatKit/CKFullScreenAppViewControllerProtocol-Protocol.h>

@class CKAppGrabberView, CKConversation, CKDismissView, CKFullScreenAppNavbarManager, CKImmediatePanGestureRecognizer, IMBalloonPlugin, IMBalloonPluginDataSource, NSObject, NSString, UILongPressGestureRecognizer, UIView, UIViewPropertyAnimator;
@protocol CKBrowserViewControllerProtocol, CKBrowserViewControllerSendDelegate, CKFullScreenAppViewControllerDelegate;

@interface CKFullScreenAppViewController : UIViewController <CKBrowserViewControllerProtocol, CKFullScreenAppNavbarManagerDelegate, CKAppGrabberViewDelegate, UIGestureRecognizerDelegate, CKFullScreenAppViewControllerProtocol>
{
    CKAppGrabberView *_grabberView;
    CKImmediatePanGestureRecognizer *_collapseGestureTracker;
    UIViewPropertyAnimator *_collapsePropertyAnimator;
    BOOL _shouldDoCollapseInteraction;
    BOOL _collapseInteractionDidMove;
    CGPoint _collapseGestureStartingLocation;
    UILongPressGestureRecognizer *_touchTracker;
    BOOL _addsVerticalPaddingForStatusBar;
    BOOL _fadesOutDuringStickerDrag;
    BOOL _usesDimmingView;
    BOOL _inTransition;
    BOOL _inDragAndDrop;
    UIViewController<CKBrowserViewControllerProtocol> *_contentViewController;
    id <CKFullScreenAppViewControllerDelegate> _delegate;
    UIView *_contentView;
    CKDismissView *_dismissView;
    CKConversation *_conversation;
    CKFullScreenAppNavbarManager *_navbarManager;
    NSUInteger _transitionDirection;
    long long _lastKnownDeviceOrientation;
    CGRect _initialBrowserFrame;
    CGRect _targetBrowserFrame;
}

@property(nonatomic) long long lastKnownDeviceOrientation; // @synthesize lastKnownDeviceOrientation=_lastKnownDeviceOrientation;
@property(nonatomic) BOOL inDragAndDrop; // @synthesize inDragAndDrop=_inDragAndDrop;
@property(nonatomic) CGRect targetBrowserFrame; // @synthesize targetBrowserFrame=_targetBrowserFrame;
@property(nonatomic) CGRect initialBrowserFrame; // @synthesize initialBrowserFrame=_initialBrowserFrame;
@property(nonatomic) NSUInteger transitionDirection; // @synthesize transitionDirection=_transitionDirection;
@property(retain, nonatomic) CKFullScreenAppNavbarManager *navbarManager; // @synthesize navbarManager=_navbarManager;
@property(retain, nonatomic) CKConversation *conversation; // @synthesize conversation=_conversation;
@property(nonatomic) BOOL inTransition; // @synthesize inTransition=_inTransition;
@property(retain, nonatomic) CKDismissView *dismissView; // @synthesize dismissView=_dismissView;
@property(retain, nonatomic) UIView *contentView; // @synthesize contentView=_contentView;
@property(nonatomic) BOOL usesDimmingView; // @synthesize usesDimmingView=_usesDimmingView;
@property(nonatomic) BOOL fadesOutDuringStickerDrag; // @synthesize fadesOutDuringStickerDrag=_fadesOutDuringStickerDrag;
@property(nonatomic) BOOL addsVerticalPaddingForStatusBar; // @synthesize addsVerticalPaddingForStatusBar=_addsVerticalPaddingForStatusBar;
@property(nonatomic) __weak id <CKFullScreenAppViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) UIViewController<CKBrowserViewControllerProtocol> *contentViewController; // @synthesize contentViewController=_contentViewController;
// - (void).cxx_destruct;
- (BOOL)_currentPluginIsJellyfish;
- (BOOL)_currentPluginIsAppManager;
- (BOOL)_currentPluginIsAppStore;
- (void)collapse;
- (void)_dismiss:(id)arg1;
- (BOOL)_shouldShowDimmingView;
- (void)_updateDimmingViewAlpha;
- (void)viewWillTransitionToSize:(CGSize)arg1 withTransitionCoordinator:(id)arg2;
- (BOOL)canBecomeFirstResponder;
- (id)inputAccessoryView;
- (void)_dragEnded:(id)arg1;
- (void)_dragBegan:(id)arg1;
- (long long)preferredStatusBarStyle;
- (BOOL)shouldAutorotate;
- (NSUInteger)supportedInterfaceOrientations;
- (void)willMoveToParentViewController:(id)arg1;
- (void)viewDidAppear:(BOOL)arg1;
- (void)dealloc;
- (void)collapse:(id)arg1;
- (void)navbarManagerDidReceiveMessage:(id)arg1;
- (void)navbarManagerDidDismissAllMessages:(id)arg1;
- (BOOL)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (BOOL)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (void)touchTrackerRecognized:(id)arg1;
- (void)collapseGestureTouchMoved:(id)arg1;
- (void)setGrabberView:(id)arg1;
- (void)reverseAndCleanupCollapseAnimator;
- (void)setupPausedCollapseAnimatorIfNeeded;
- (double)collapseTargetOriginY;
- (void)appGrabberViewCloseButtonTapped:(id)arg1;
- (void)hideDimmingView;
- (void)animateBrowserViewToTargetRect:(CGRect)arg1 grabberView:(id)arg2 completion:(id /* CDUnknownBlockType */)arg3;
- (void)animateBrowserViewFromSourceRect:(CGRect)arg1 interactive:(BOOL)arg2 grabberView:(id)arg3 completion:(id /* CDUnknownBlockType */)arg4;
- (CGRect)leftRightSafeAreaInsetRect:(CGRect)arg1;
- (CGRect)finalContentViewFrame;
- (void)updateGrabberTitleAndIconForPlugin:(id)arg1;
- (double)topAreaHeight;
- (void)addNewGrabberView;
- (id)traitCollection;
- (void)viewDidLayoutSubviews;
- (void)loadView;
- (id)initWithConversation:(id)arg1 plugin:(id)arg2;
@property(readonly, nonatomic) BOOL inFullScreenModalPresentation;
@property(readonly, nonatomic) BOOL inExpandedPresentation;
- (BOOL)isLoaded;
- (void)dismiss;
- (id)initWithBalloonPlugin:(id)arg1;
- (id)initWithBalloonPlugin:(id)arg1 dataSource:(id)arg2;
@property(readonly, nonatomic) long long browserPresentationStyle;
@property(nonatomic) NSString *conversationID;
@property(nonatomic) BOOL isiMessage;
@property(readonly, nonatomic) BOOL shouldShowChatChrome;
@property(retain, nonatomic) IMBalloonPluginDataSource *balloonPluginDataSource;
@property(readonly, nonatomic) IMBalloonPlugin *balloonPlugin;
@property(nonatomic) __weak NSObject<CKBrowserViewControllerSendDelegate> *sendDelegate;
@property(retain, nonatomic) UIViewController *presentationViewController;
@property(nonatomic) BOOL isPrimaryViewController;
@property(readonly, nonatomic, getter=isDismissing) BOOL dismissing;
@property(readonly, nonatomic) BOOL shouldSuppressEntryView;
@property(readonly, nonatomic) BOOL mayBeKeptInViewHierarchy;
@property(readonly, nonatomic) BOOL supportsQuickView;
@property(readonly, nonatomic) BOOL wantsOpaqueUI;
@property(readonly, nonatomic) BOOL wantsDarkUI;

@end

